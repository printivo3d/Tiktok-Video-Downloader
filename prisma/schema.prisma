// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  downloads     Download[]
  playlists     Playlist[]
  favorites     Favorite[]
  
  @@map("users")
}

model Download {
  id            String   @id @default(cuid())
  url           String
  title         String?
  type          DownloadType
  platform      Platform
  author        String?
  thumbnail     String?
  quality       String?
  fileSize      Int?
  duration      Int?
  status        DownloadStatus @default(COMPLETED)
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User?    @relation(fields: [userId], references: [id])
  playlistItems PlaylistItem[]
  favorites     Favorite[]
  
  @@map("downloads")
}

model Playlist {
  id            String   @id @default(cuid())
  name          String
  description   String?
  isPublic      Boolean  @default(false)
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         PlaylistItem[]
  
  @@map("playlists")
}

model PlaylistItem {
  id            String   @id @default(cuid())
  playlistId    String
  downloadId    String
  order         Int
  createdAt     DateTime @default(now())
  
  // Relations
  playlist      Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  download      Download  @relation(fields: [downloadId], references: [id], onDelete: Cascade)
  
  @@unique([playlistId, downloadId])
  @@map("playlist_items")
}

model Favorite {
  id            String   @id @default(cuid())
  userId        String
  downloadId    String
  createdAt     DateTime @default(now())
  
  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  download      Download  @relation(fields: [downloadId], references: [id], onDelete: Cascade)
  
  @@unique([userId, downloadId])
  @@map("favorites")
}

model Analytics {
  id            String   @id @default(cuid())
  event         String
  properties    String?  // JSON string for additional properties
  userId        String?
  sessionId     String?
  userAgent     String?
  ipAddress     String?
  createdAt     DateTime @default(now())
  
  @@map("analytics")
}

enum DownloadType {
  VIDEO
  PHOTO
  REEL
  STORY
  POST
}

enum Platform {
  TIKTOK
  INSTAGRAM
  YOUTUBE
  TWITTER
  FACEBOOK
}

enum DownloadStatus {
  PENDING
  DOWNLOADING
  COMPLETED
  FAILED
}